(PolyK={}).IsSimple=function(n){var t=n.length>>1;if(t<4)return!0;for(var r=new PolyK._P,e=new PolyK._P,o=new PolyK._P,y=new PolyK._P,l=new PolyK._P,i=0;i<t;i++){r.x=n[2*i],r.y=n[2*i+1],i==t-1?(e.x=n[0],e.y=n[1]):(e.x=n[2*i+2],e.y=n[2*i+3]);for(var P=0;P<t;P++)if(!(2>Math.abs(i-P))&&(P!=t-1||0!=i)&&(i!=t-1||0!=P)&&(o.x=n[2*P],o.y=n[2*P+1],P==t-1?(y.x=n[0],y.y=n[1]):(y.x=n[2*P+2],y.y=n[2*P+3]),null!=PolyK._GetLineIntersection(r,e,o,y,l)))return!1}return!0},PolyK.IsConvex=function(n){if(n.length<6)return!0;for(var t=n.length-4,r=0;r<t;r+=2)if(!PolyK._convex(n[r],n[r+1],n[r+2],n[r+3],n[r+4],n[r+5]))return!1;return!!(PolyK._convex(n[t],n[t+1],n[t+2],n[t+3],n[0],n[1])&&PolyK._convex(n[t+2],n[t+3],n[0],n[1],n[2],n[3]))},PolyK.GetArea=function(n){if(n.length<6)return 0;for(var t=n.length-2,r=0,e=0;e<t;e+=2)r+=(n[e+2]-n[e])*(n[e+1]+n[e+3]);return-(.5*(r+=(n[0]-n[t])*(n[t+1]+n[1])))},PolyK.GetAABB=function(n){for(var t=1/0,r=1/0,e=-1/0,o=-1/0,y=0;y<n.length;y+=2)t=Math.min(t,n[y]),e=Math.max(e,n[y]),r=Math.min(r,n[y+1]),o=Math.max(o,n[y+1]);return{x:t,y:r,width:e-t,height:o-r}},PolyK.Reverse=function(n){for(var t=[],r=n.length-2;r>=0;r-=2)t.push(n[r],n[r+1]);return t},PolyK.Triangulate=function(n){var t=n.length>>1;if(t<3)return[];for(var r=[],e=[],o=0;o<t;o++)e.push(o);for(var o=0,y=t;y>3;){var l=e[(o+0)%y],i=e[(o+1)%y],P=e[(o+2)%y],a=n[2*l],u=n[2*l+1],x=n[2*i],f=n[2*i+1],s=n[2*P],K=n[2*P+1],h=!1;if(PolyK._convex(a,u,x,f,s,K)){h=!0;for(var v=0;v<y;v++){var _=e[v];if(_!=l&&_!=i&&_!=P&&PolyK._PointInTriangle(n[2*_],n[2*_+1],a,u,x,f,s,K)){h=!1;break}}}if(h)r.push(l,i,P),e.splice((o+1)%y,1),y--,o=0;else if(o++>3*y)break}return r.push(e[0],e[1],e[2]),r},PolyK.ContainsPoint=function(n,t,r){for(var e,o=n.length>>1,y=n[2*o-3]-r,l=n[2*o-2]-t,i=n[2*o-1]-r,P=0;P<o;P++)e=l,y=i,l=n[2*P]-t,y!=(i=n[2*P+1]-r)&&(lup=i>y);for(var a=0,P=0;P<o;P++)if(e=l,y=i,l=n[2*P]-t,i=n[2*P+1]-r,(!(y<0)||!(i<0))&&(!(y>0)||!(i>0))&&(!(e<0)||!(l<0))){if(y==i&&0>=Math.min(e,l))return!0;if(y!=i){var u=e+-((l-e)*y)/(i-y);if(0==u)return!0;u>0&&a++,0==y&&lup&&i>y&&a--,0==y&&!lup&&i<y&&a--,lup=i>y}}return(1&a)==1},PolyK.Slice=function(n,t,r,e,o){if(PolyK.ContainsPoint(n,t,r)||PolyK.ContainsPoint(n,e,o))return[n.slice(0)];for(var y=new PolyK._P(t,r),l=new PolyK._P(e,o),i=[],P=[],a=0;a<n.length;a+=2)P.push(new PolyK._P(n[a],n[a+1]));for(var a=0;a<P.length;a++){var u=new PolyK._P(0,0);u=PolyK._GetLineIntersection(y,l,P[a],P[(a+1)%P.length],u);var x=i[0],f=i[i.length-1];u&&(null==x||PolyK._P.dist(u,x)>1e-10)&&(null==f||PolyK._P.dist(u,f)>1e-10)&&(u.flag=!0,i.push(u),P.splice(a+1,0,u),a++)}if(i.length<2)return[n.slice(0)];i.sort(function(n,t){return PolyK._P.dist(y,n)-PolyK._P.dist(y,t)});for(var s=[],K=0;i.length>0;){P.length;var h=i[0],v=i[1],_=P.indexOf(h),c=P.indexOf(v),g=!1;if(PolyK._firstWithFlag(P,_)==c?g=!0:(h=i[1],v=i[0],_=P.indexOf(h),c=P.indexOf(v),PolyK._firstWithFlag(P,_)==c&&(g=!0)),g){K--;var p=PolyK._getPoints(P,_,c);s.push(p),P=PolyK._getPoints(P,c,_),h.flag=v.flag=!1,i.splice(0,2),0==i.length&&s.push(P)}else K++,i.reverse();if(K>1)break}for(var d=[],a=0;a<s.length;a++){for(var I=s[a],m=[],M=0;M<I.length;M++)m.push(I[M].x,I[M].y);d.push(m)}return d},PolyK.Raycast=function(n,t,r,e,o,y){var l=n.length-2,i=PolyK._tp,P=i[0],a=i[1],u=i[2],x=i[3],f=i[4];P.x=t,P.y=r,a.x=t+e,a.y=r+o,null==y&&(y={dist:0,edge:0,norm:{x:0,y:0},refl:{x:0,y:0}}),y.dist=1/0;for(var s=0;s<l;s+=2){u.x=n[s],u.y=n[s+1],x.x=n[s+2],x.y=n[s+3];var K=PolyK._RayLineIntersection(P,a,u,x,f);K&&PolyK._updateISC(e,o,P,u,x,f,s/2,y)}u.x=x.x,u.y=x.y,x.x=n[0],x.y=n[1];var K=PolyK._RayLineIntersection(P,a,u,x,f);return K&&PolyK._updateISC(e,o,P,u,x,f,n.length/2-1,y),y.dist!=1/0?y:null},PolyK.ClosestEdge=function(n,t,r,e){var o=n.length-2,y=PolyK._tp,l=y[0],i=y[2],P=y[3];y[4],l.x=t,l.y=r,null==e&&(e={dist:0,edge:0,point:{x:0,y:0},norm:{x:0,y:0}}),e.dist=1/0;for(var a=0;a<o;a+=2)i.x=n[a],i.y=n[a+1],P.x=n[a+2],P.y=n[a+3],PolyK._pointLineDist(l,i,P,a>>1,e);i.x=P.x,i.y=P.y,P.x=n[0],P.y=n[1],PolyK._pointLineDist(l,i,P,o>>1,e);var u=1/e.dist;return e.norm.x=(t-e.point.x)*u,e.norm.y=(r-e.point.y)*u,e},PolyK._pointLineDist=function(n,t,r,e,o){var y,l,i=n.x,P=n.y,a=t.x,u=t.y,x=r.x,f=r.y,s=x-a,K=f-u,h=((i-a)*s+(P-u)*K)/(s*s+K*K);h<0||a==x&&u==f?(y=a,l=u):h>1?(y=x,l=f):(y=a+h*s,l=u+h*K);var v=i-y,_=P-l,c=Math.sqrt(v*v+_*_);c<o.dist&&(o.dist=c,o.edge=e,o.point.x=y,o.point.y=l)},PolyK._updateISC=function(n,t,r,e,o,y,l,i){var P=PolyK._P.dist(r,y);if(P<i.dist){var a=1/PolyK._P.dist(e,o),u=-(o.y-e.y)*a,x=(o.x-e.x)*a,f=2*(n*u+t*x);i.dist=P,i.norm.x=u,i.norm.y=x,i.refl.x=-f*u+n,i.refl.y=-f*x+t,i.edge=l}},PolyK._getPoints=function(n,t,r){var e=n.length,o=[];r<t&&(r+=e);for(var y=t;y<=r;y++)o.push(n[y%e]);return o},PolyK._firstWithFlag=function(n,t){for(var r=n.length;;)if(n[t=(t+1)%r].flag)return t},PolyK._PointInTriangle=function(n,t,r,e,o,y,l,i){var P=l-r,a=i-e,u=o-r,x=y-e,f=n-r,s=t-e,K=P*P+a*a,h=P*u+a*x,v=P*f+a*s,_=u*u+x*x,c=u*f+x*s,g=1/(K*_-h*h),p=(_*v-h*c)*g,d=(K*c-h*v)*g;return p>=0&&d>=0&&p+d<1},PolyK._RayLineIntersection=function(n,t,r,e,o){var y=n.x-t.x,l=r.x-e.x,i=n.y-t.y,P=r.y-e.y,a=y*P-i*l;if(0==a)return null;var u=n.x*t.y-n.y*t.x,x=r.x*e.y-r.y*e.x,f=1/a;return(o.x=(u*l-y*x)*f,o.y=(u*P-i*x)*f,!PolyK._InRect(o,r,e)||i>0&&o.y>n.y||i<0&&o.y<n.y||y>0&&o.x>n.x||y<0&&o.x<n.x)?null:o},PolyK._GetLineIntersection=function(n,t,r,e,o){var y=n.x-t.x,l=r.x-e.x,i=n.y-t.y,P=r.y-e.y,a=y*P-i*l;if(0==a)return null;var u=n.x*t.y-n.y*t.x,x=r.x*e.y-r.y*e.x;return(o.x=(u*l-y*x)/a,o.y=(u*P-i*x)/a,PolyK._InRect(o,n,t)&&PolyK._InRect(o,r,e))?o:null},PolyK._InRect=function(n,t,r){var e=Math.min(t.x,r.x),o=Math.max(t.x,r.x),y=Math.min(t.y,r.y),l=Math.max(t.y,r.y);return e==o?y<=n.y&&n.y<=l:y==l?e<=n.x&&n.x<=o:e<=n.x+1e-10&&n.x-1e-10<=o&&y<=n.y+1e-10&&n.y-1e-10<=l},PolyK._convex=function(n,t,r,e,o,y){return(t-e)*(o-r)+(r-n)*(y-e)>=0},PolyK._P=function(n,t){this.x=n,this.y=t,this.flag=!1},PolyK._P.prototype.toString=function(){return"Point ["+this.x+", "+this.y+"]"},PolyK._P.dist=function(n,t){var r=t.x-n.x,e=t.y-n.y;return Math.sqrt(r*r+e*e)},PolyK._tp=[];for(var n=0;n<10;n++)PolyK._tp.push(new PolyK._P(0,0));